generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String?
  email          String?       @unique
  email_verified DateTime?
  image          String?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  comments       Comment[]
  orgs           UserOrg[]
  projects       UserProject[]
  tasks          Task[]

  @@map("users")
}

model VerificationRequest {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  identifier String
  token      String
  expires    DateTime?

  @@map("verification_requests")
}

model Project {
  id      Int           @id @default(autoincrement())
  name    String
  orgId   Int
  org     Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  columns Column[]
  users   UserProject[]
}

model UserProject {
  userId    Int
  projectId Int
  isAdmin   Boolean
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model Org {
  id       Int       @id @default(autoincrement())
  name     String?
  projects Project[]
  users    UserOrg[]
}

model UserOrg {
  userId    Int
  orgId     Int
  isCreator Boolean @default(true)
  org       Org     @relation(fields: [orgId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, orgId])
}

model Column {
  id        Int      @id @default(autoincrement())
  title     String
  projectId Int?
  index     Int
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id       Int       @id @default(autoincrement())
  title    String
  body     String
  columnId Int
  index    Int
  column   Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  comments Comment[]
  user     User[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  userId    Int
  taskId    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  tasks     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}
